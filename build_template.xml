<?xml version="1.0" encoding="UTF-8" ?>
<project basedir="{{basedir}}" name="xrechnung-visualization" default="transform-to-visualization">

    <!-- project directory structure -->
    <property name="dist.dir" location="${basedir}/output"/>
    <property name="lib.dir" location="{{lib_dir}}"/>
    <property name="build.dir" location="{{build_dir}}"/>
    <property name="src.dir" location="{{xrechnung_viz_dir}}/src"/>
    <property name="download.dir" location="${build.dir}/download"/>

    <!-- fop -->
    <property name="fop.jar" value="fop.jar"/>
    <property name="fop.home" value="${lib.dir}/fop"/>
    <property name="fop.config" value="{{xrechnung_viz_dir}}/conf/fop.xconf"/>

    <!-- Part of the download path -->
    <property name="saxon.url.version" value="10"/>
    <!-- Part of the download path -->
    <property name="saxon.file.version" value="10-6J"/>
    <!-- the name of the JAR file in the downloaded ZIP file -->
    <property name="saxon.jar" value="saxon-he-10.6.jar"/>

    <!-- Naming -->
    <property name="xr-visualization.version.full" value="2024-10-31-SNAPSHOT"/>

    <!-- Test resources -->
    <property name="xrechnung.version.major.minor" value="3.0"/>
    <property name="xrechnung.version.full" value="${xrechnung.version.major.minor}.2"/>

    <property name="github.group.url" value="https://github.com/itplr-kosit"/>

    <property name="validator.version" value="1.5.0"/>
    <property name="validator.jar" value="validationtool-${validator.version}-standalone.jar"/>
    <property name="validator.download.zip" value="validator-${validator.version}-distribution.zip"/>
    <property name="validator.download.url"
        value="${github.group.url}/validator/releases/download/v${validator.version}/${validator.download.zip}"/>

    <!-- Validator Configuration XRechnung -->
    <property name="validator.config.proj.name" value="validator-configuration-xrechnung"/>
    <property name="validator.config.release.date" value="2024-06-20"/>

    <property name="validator.config.download.url"
        value="${github.group.url}/${validator.config.proj.name}/releases/download/release-${validator.config.release.date}/${validator.config.proj.name}_${xrechnung.version.full}_${validator.config.release.date}.zip"/>
    <property name="validator.config.release.version"
        value="release-${validator.config.release.date}"/>
    <property name="validator.config.zip"
        value="validator-configuration-xrechnung_${xrechnung.version.full}_${validator.config.release.date}.zip"/>
    <!-- Validator Configuration XRechnung Repository -->
    <property name="validator.repository.dir"
        location="${build.dir}/xrechnung-configuration-repository"/>

    <!-- vnu html validator -->
    <property name="vnu.jar" value="vnu.jar"/>
    <property name="vnu.version" value="20.6.30"/>
    <property name="vnu.zip" value="${vnu.jar}_${vnu.version}.zip"/>
    <property name="vnu.download.url"
        value="https://github.com/validator/validator/releases/download/${vnu.version}/${vnu.zip}"/>
    <property name="xr.testsuite.docs.download.url.base"
        value="https://raw.githubusercontent.com/itplr-kosit/xrechnung-testsuite/master/src/test/business-cases"/>
    <property name="test.src.dir" location="${src.dir}/test"/>
    <property name="test.build.dir" location="${build.dir}/test"/>
    <property name="test.docs.dir" location="${test.build.dir}/instances"/>
    <property name="test.docs.positive.dir" location="${test.docs.dir}/positive"/>
    <property name="test.docs.negative.dir" location="${test.docs.dir}/negative"/>
    <property name="test.transformed.dir" location="${test.build.dir}/transformed"/>
    <property name="test.transformed.html.dir" location="${test.build.dir}/html"/>
    <property name="test.transformed.pdf.dir" location="${test.build.dir}/pdf"/>
    <property name="test.reports.dir" location="${test.build.dir}/reports"/>

    <!-- testsuite -->
    <property name="xr.testsuite.version" value="2024-06-20"/>
    <property name="xr.testsuite.download.url.prefix"
        value="https://github.com/itplr-kosit/xrechnung-testsuite/releases/download"/>
    <property name="xr.testsuite.zip"
        value="xrechnung-${xrechnung.version.full}-testsuite-${xr.testsuite.version}.zip"/>

    <property name="xrechnung.xsd.ns"
        value="urn:ce.eu:en16931:2017:xoev-de:kosit:standard:xrechnung-1"/>

    <target name="init" description="Initializes build directory structure and ISO timestamp">
        <!-- Create timestamps -->
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd"/>
        </tstamp>
        <echo>Build date: ${build.date}</echo>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${download.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${fop.home}"/>
        <mkdir dir="${test.docs.dir}"/>
        <mkdir dir="${test.docs.positive.dir}"/>
        <mkdir dir="${test.docs.negative.dir}"/>
        <mkdir dir="${test.transformed.dir}"/>
        <mkdir dir="${test.transformed.html.dir}"/>
        <mkdir dir="${test.transformed.pdf.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${validator.repository.dir}"/>

        <available property="validator.repository.dir.available"
            file="${validator.repository.dir}/scenarios.xml"/>

        <available file="${lib.dir}/${saxon.jar}" property="dep.saxon.available"/>
        <available file="${lib.dir}/${validator.jar}" property="dep.validator.available"/>
        <available file="${fop.home}/${fop.jar}" property="dep.fop.available"/>
        <available file="${lib.dir}/${vnu.jar}" property="dep.vnu.available"/>

    </target>

    <target name="provide-saxon" depends="init" unless="dep.saxon.available"
        description="Download Saxon-HE and add jar to library directory">
        <get
            src="https://sourceforge.net/projects/saxon/files/Saxon-HE/${saxon.url.version}/Java/SaxonHE${saxon.file.version}.zip/download"
            dest="${download.dir}/SaxonHE${saxon.file.version}.zip" verbose="true"
            skipexisting="true" usetimestamp="true"/>
        <fail unless="saxon.jar" message="Provide a name for the extracted saxon jar"/>
        <unzip src="${download.dir}/SaxonHE${saxon.file.version}.zip" dest="${lib.dir}">
            <patternset>
                <include name="**/${saxon.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>

    <target name="provide-validator" depends="init" unless="dep.validator.available"
        description="Download KoSIT validation tool and add jar to library directory">
        <get src="${validator.download.url}" dest="${download.dir}" verbose="true"
            skipexisting="true" usetimestamp="true"/>
        <!-- Cause unzip task does not error on missing dest directory -->
        <fail message="Lib directory ${lib.dir} does not exist!">
            <condition>
                <not>
                    <available file="${lib.dir}"/>
                </not>
            </condition>
        </fail>
        <fail unless="validator.jar" message="Need to specify property with name 'validator.jar'"/>
        <unzip src="${download.dir}/${validator.download.zip}" dest="${lib.dir}">
            <patternset>
                <include name="**/${validator.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>


    <target name="provide-vnu" depends="init" description="Download vNU" unless="dep.vnu.available">
        <get src="${vnu.download.url}" dest="${download.dir}" verbose="true" skipexisting="true"
            usetimestamp="true"/>
        <!-- Cause unzip task does not error on missing dest directory -->
        <fail message="Lib directory ${lib.dir} does not exist!">
            <condition>
                <not>
                    <available file="${lib.dir}"/>
                </not>
            </condition>
        </fail>
        <fail unless="vnu.jar" message="Need to specify property with name 'vnu.jar'"/>
        <unzip src="${download.dir}/${vnu.zip}" dest="${lib.dir}">
            <patternset>
                <include name="**/${vnu.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>

    <target name="retrieve-validator-configuration" depends="init"
        unless="validator.repository.dir.available">

        <echo
            message="Retrieving Validator Configuration XRechnung from ${validator.config.download.url}"/>

        <get src="${validator.config.download.url}" dest="${lib.dir}/${validator.config.zip}"
            verbose="true" skipexisting="false" usetimestamp="true"/>
    </target>


    <target name="provide-validator-configuration" unless="validator.repository.dir.available"
        depends="retrieve-validator-configuration, provide-validator">
        <unzip src="${lib.dir}/${validator.config.zip}" dest="${validator.repository.dir}"/>
    </target>


    <target name="provide-fop" depends="init, provide-saxon" unless="${dep.fop.available}"
        description="Download Apache FOP for taskdef stuff">
        <get src="https://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-2.6-bin.zip"
            dest="${download.dir}/fop-2.6-bin.zip" verbose="true" skipexisting="true"
            usetimestamp="true"/>
        <fail unless="fop.jar" message="Provide a name for the extracted fop jar"/>
        <unzip src="${download.dir}/fop-2.6-bin.zip" dest="${fop.home}">
            <patternset>
                <include name="**/build/${fop.jar}"/>
                <include name="**/lib/*.jar"/>
                <exclude name="**/xalan*.jar"/>
            </patternset>
            <flattenmapper/>
        </unzip>

    </target>

    <target name="dependency-resolve"
        depends="init, provide-fop, provide-validator, provide-validator-configuration, provide-saxon, provide-vnu">
        <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
            <classpath>
                <fileset dir="${fop.home}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${lib.dir}">
                    <include name="${saxon.jar}"/>
                </fileset>
            </classpath>
        </taskdef>

    </target>

    <target name="transform-invoice-to-xr" depends="dependency-resolve">
        <xslt basedir="${basedir}/input" destdir="${basedir}/transformed"
            style="${src.dir}/xsl/{{xr_xsl}}" includes="**/*.xml">
            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <chainedmapper>
                <flattenmapper/>
                <mapper type="glob" from="*.xml" to="*-xr.xml"/>
            </chainedmapper>
        </xslt>
    </target>

    <target name="transform-xr-to-pdf" depends="transform-invoice-to-xr">
        <echo message="Transforming PDF with profile=${fop.config}"/>
        <xslt basedir="${basedir}/transformed" destdir="${basedir}/transformed"
            style="${src.dir}/xsl/xr-pdf.xsl" includes="**/*-xr.xml">
            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <param name="fop.extensions" type="STRING" expression="fop"/>
            <mapper type="glob" from="*.xml" to="*.fo"/>
        </xslt>

        <fop format="application/pdf" outdir="${dist.dir}" messagelevel="debug"
            userconfig="${fop.config}">
            <fileset dir="${basedir}/transformed">
                <include name="*.fo"/>
            </fileset>
        </fop>
    </target>
</project>
